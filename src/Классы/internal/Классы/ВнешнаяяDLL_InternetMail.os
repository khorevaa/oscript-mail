#Использовать logos
#Использовать semver

Перем Лог;

#Область ПрограммныйИнтерфейс

Процедура Подключить() Экспорт

	ПодключитьDLL();

КонецПроцедуры

#КонецОбласти

#Область Упакованные_dll

Процедура РаспаковатьДанныеDLL(Знач ПутьКФайлу, ДанныеDLL)
	
	ДвоичныеДанные = Base64Значение(ДанныеDLL.ДвоичныеДанные());
	
	ОбеспечитьКаталог(ПутьКФайлу);
		
	ДвоичныеДанные.Записать(ПутьКФайлу);

КонецПроцедуры

Функция ВычислитьХешФайла(Знач ПутьКФайлу)

	ХешФайла = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешФайла.ДобавитьФайл(ПутьКФайлу);

 	Возврат ХешФайла.ХешСуммаСтрокой;
	
КонецФункции

Процедура ПодключитьDLL()
	
	ЗапакованныеДанные = ПолучитьДанныеDLL();

	Для каждого КлючЗначение Из ЗапакованныеДанные Цикл

		ЗапакованнаяDLL = КлючЗначение.Значение;

		Если ЗапакованнаяDLL = Неопределено Тогда
			ВызватьИсключение "Не удалось найти библиотеку чтения файлов <MailComponent>";
		КонецЕсли;	
	
		НайтиФайлИлиРаспаковать(ЗапакованнаяDLL);

	КонецЦикла;
	
	ПутьКФайлу = ПолучитьПутьКФайлуDLL(ЗапакованныеДанные.MailComponent.ИмяФайла(), ЗапакованныеДанные.MailComponent.Версия());

	ПодключитьВнешнююКомпоненту(ПутьКФайлу);

КонецПроцедуры

Процедура НайтиФайлИлиРаспаковать(ДанныеDLL)
	
	ИмяФайла = ДанныеDLL.ИмяФайла();
	
	ПутьКФайлу = ПолучитьПутьКФайлуDLL(ИмяФайла, ДанныеDLL.Версия());

	ВременныйФайл = Новый Файл(ПутьКФайлу);

	Если Не ВременныйФайл.Существует() 
		Тогда// ИЛИ Не ВычислитьХешФайла(ПутьКФайлу) = ДанныеDll.Хеш() Тогда
		РаспаковатьДанныеDLL(ПутьКФайлу, ДанныеDLL);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПутьКФайлуDLL(ИмяФайла, ВерсияФайла)
	ПутьКФайлу = ОбъединитьПути(КаталогВременныхФайлов(), ".InternetMail", СтрЗаменить(ВерсияФайла, ".", "_"), ИмяФайла);
	Возврат ПутьКФайлу;
КонецФункции

Процедура ОбеспечитьКаталог(ПутьККаталогу)
	
	ВременныйКаталог = Новый Файл(ПутьККаталогу);

	Если ВременныйКаталог.Существует() Тогда
		Возврат;
	КонецЕсли;

	СоздатьКаталог(ВременныйКаталог.Путь);

КонецПроцедуры

Функция ПолучитьДанныеDLL()
	
	СИ = Новый СистемнаяИнформация;
	ТекущаяВерсия = Новый Версия(СИ.Версия);

	ИндексВерсийДЛЛ = Новый Соответствие;
	ИндексВерсийДЛЛ.Вставить("1.0.4", ">=1.0.19");

	МассивПодходящихВерсийДЛЛ = Новый Массив;

	Для каждого ВерсияПроверки Из ИндексВерсийДЛЛ Цикл
		
		ДиапазонСравнения = ВерсияПроверки.Значение;
		ВерсияПроверкиДЛЛ = ВерсияПроверки.Ключ;
		Результат = Версии.ВерсияВДиапазоне(ТекущаяВерсия, ДиапазонСравнения);

		Если Результат Тогда
			МассивПодходящихВерсийДЛЛ.Добавить(ВерсияПроверкиДЛЛ);
		КонецЕсли;

	КонецЦикла;

	ВерсияДЛЛ = Версии.МаксимальнаяИзМассива(МассивПодходящихВерсийДЛЛ);
	
	МенеджерЗапакованныхФайлов = Новый МенеджерЗапакованныхФайлов;

	MailComponent = МенеджерЗапакованныхФайлов.ПолучитьКлассФайла("MailComponent.dll", ВерсияДЛЛ);
	BouncyCastle_Crypto = МенеджерЗапакованныхФайлов.ПолучитьКлассФайла("BouncyCastle.Crypto.dll", ВерсияДЛЛ);
	MailKit = МенеджерЗапакованныхФайлов.ПолучитьКлассФайла("MailKit.dll", ВерсияДЛЛ);
	MimeKit = МенеджерЗапакованныхФайлов.ПолучитьКлассФайла("MimeKit.dll", ВерсияДЛЛ);
	
	ДанныеDLL = Новый Структура("MailComponent, BouncyCastle_Crypto, MailKit, MimeKit", MailComponent, BouncyCastle_Crypto, MailKit, MimeKit);

	Возврат ДанныеDLL;

КонецФункции

#КонецОбласти

Лог = Логирование.ПолучитьЛог("oscript.lib.internetmail");